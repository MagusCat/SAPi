// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Model.Models;

#pragma warning disable 219, 612, 618
#nullable enable

namespace Model.Data.Instance
{
    internal partial class RecordEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Model.Models.Record",
                typeof(Record),
                baseEntityType);

            var idRecord = runtimeEntityType.AddProperty(
                "IdRecord",
                typeof(int),
                propertyInfo: typeof(Record).GetProperty("IdRecord", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Record).GetField("<IdRecord>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            idRecord.AddAnnotation("Relational:ColumnName", "id_record");
            idRecord.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var date = runtimeEntityType.AddProperty(
                "Date",
                typeof(DateTime),
                propertyInfo: typeof(Record).GetProperty("Date", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Record).GetField("<Date>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd);
            date.AddAnnotation("Relational:ColumnName", "date");
            date.AddAnnotation("Relational:ColumnType", "datetime");
            date.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            date.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var entry = runtimeEntityType.AddProperty(
                "Entry",
                typeof(bool),
                propertyInfo: typeof(Record).GetProperty("Entry", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Record).GetField("<Entry>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            entry.AddAnnotation("Relational:ColumnName", "entry");
            entry.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var idProduct = runtimeEntityType.AddProperty(
                "IdProduct",
                typeof(int),
                propertyInfo: typeof(Record).GetProperty("IdProduct", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Record).GetField("<IdProduct>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            idProduct.AddAnnotation("Relational:ColumnName", "id_product");
            idProduct.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var idUnit = runtimeEntityType.AddProperty(
                "IdUnit",
                typeof(int),
                propertyInfo: typeof(Record).GetProperty("IdUnit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Record).GetField("<IdUnit>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            idUnit.AddAnnotation("Relational:ColumnName", "id_unit");
            idUnit.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var idUser = runtimeEntityType.AddProperty(
                "IdUser",
                typeof(int),
                propertyInfo: typeof(Record).GetProperty("IdUser", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Record).GetField("<IdUser>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            idUser.AddAnnotation("Relational:ColumnName", "id_user");
            idUser.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var quantity = runtimeEntityType.AddProperty(
                "Quantity",
                typeof(double),
                propertyInfo: typeof(Record).GetProperty("Quantity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Record).GetField("<Quantity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            quantity.AddAnnotation("Relational:ColumnName", "quantity");
            quantity.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { idRecord });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK__Record__13533D29DACE5571");

            var index = runtimeEntityType.AddIndex(
                new[] { idProduct });

            var index0 = runtimeEntityType.AddIndex(
                new[] { idUnit });

            var index1 = runtimeEntityType.AddIndex(
                new[] { idUser });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IdProduct")! },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("IdProduct")! })!,
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var idProductNavigation = declaringEntityType.AddNavigation("IdProductNavigation",
                runtimeForeignKey,
                onDependent: true,
                typeof(Product),
                propertyInfo: typeof(Record).GetProperty("IdProductNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Record).GetField("<IdProductNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var records = principalEntityType.AddNavigation("Records",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Record>),
                propertyInfo: typeof(Product).GetProperty("Records", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Product).GetField("<Records>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "fk_product_record");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IdUnit")! },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("IdUnit")! })!,
                principalEntityType,
                required: true);

            var idUnitNavigation = declaringEntityType.AddNavigation("IdUnitNavigation",
                runtimeForeignKey,
                onDependent: true,
                typeof(Unit),
                propertyInfo: typeof(Record).GetProperty("IdUnitNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Record).GetField("<IdUnitNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var records = principalEntityType.AddNavigation("Records",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Record>),
                propertyInfo: typeof(Unit).GetProperty("Records", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Unit).GetField("<Records>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "fk_unit_record");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IdUser")! },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("IdUser")! })!,
                principalEntityType,
                required: true);

            var idUserNavigation = declaringEntityType.AddNavigation("IdUserNavigation",
                runtimeForeignKey,
                onDependent: true,
                typeof(User),
                propertyInfo: typeof(Record).GetProperty("IdUserNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Record).GetField("<IdUserNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var records = principalEntityType.AddNavigation("Records",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Record>),
                propertyInfo: typeof(User).GetProperty("Records", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(User).GetField("<Records>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "fk_user");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Record");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
