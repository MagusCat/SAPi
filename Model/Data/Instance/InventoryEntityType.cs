// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Model.Models;

#pragma warning disable 219, 612, 618
#nullable enable

namespace Model.Data.Instance
{
    internal partial class InventoryEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Model.Models.Inventory",
                typeof(Inventory),
                baseEntityType);

            var idInventory = runtimeEntityType.AddProperty(
                "IdInventory",
                typeof(int),
                propertyInfo: typeof(Inventory).GetProperty("IdInventory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Inventory).GetField("<IdInventory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            idInventory.AddAnnotation("Relational:ColumnName", "id_inventory");
            idInventory.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var active = runtimeEntityType.AddProperty(
                "Active",
                typeof(bool?),
                propertyInfo: typeof(Inventory).GetProperty("Active", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Inventory).GetField("<Active>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            active.AddAnnotation("Relational:ColumnName", "active");
            active.AddAnnotation("Relational:DefaultValueSql", "((1))");
            active.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var dateEntry = runtimeEntityType.AddProperty(
                "DateEntry",
                typeof(DateTime),
                propertyInfo: typeof(Inventory).GetProperty("DateEntry", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Inventory).GetField("<DateEntry>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd);
            dateEntry.AddAnnotation("Relational:ColumnName", "date_entry");
            dateEntry.AddAnnotation("Relational:ColumnType", "datetime");
            dateEntry.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            dateEntry.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var dateExpiration = runtimeEntityType.AddProperty(
                "DateExpiration",
                typeof(DateTime?),
                propertyInfo: typeof(Inventory).GetProperty("DateExpiration", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Inventory).GetField("<DateExpiration>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            dateExpiration.AddAnnotation("Relational:ColumnName", "date_expiration");
            dateExpiration.AddAnnotation("Relational:ColumnType", "datetime");
            dateExpiration.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var idProduct = runtimeEntityType.AddProperty(
                "IdProduct",
                typeof(int),
                propertyInfo: typeof(Inventory).GetProperty("IdProduct", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Inventory).GetField("<IdProduct>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            idProduct.AddAnnotation("Relational:ColumnName", "id_product");
            idProduct.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var quantity = runtimeEntityType.AddProperty(
                "Quantity",
                typeof(double),
                propertyInfo: typeof(Inventory).GetProperty("Quantity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Inventory).GetField("<Quantity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            quantity.AddAnnotation("Relational:ColumnName", "quantity");
            quantity.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { idInventory });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK__Inventor__84080356CB3C6497");

            var index = runtimeEntityType.AddIndex(
                new[] { idProduct });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IdProduct")! },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("IdProduct")! })!,
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var idProductNavigation = declaringEntityType.AddNavigation("IdProductNavigation",
                runtimeForeignKey,
                onDependent: true,
                typeof(Product),
                propertyInfo: typeof(Inventory).GetProperty("IdProductNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Inventory).GetField("<IdProductNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var inventories = principalEntityType.AddNavigation("Inventories",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Inventory>),
                propertyInfo: typeof(Product).GetProperty("Inventories", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Product).GetField("<Inventories>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "fk_product");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Inventory");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
