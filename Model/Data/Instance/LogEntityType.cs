// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Metadata;
using Model.Models;

#pragma warning disable 219, 612, 618
#nullable enable

namespace Model.Data.Instance
{
    internal partial class LogEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Model.Models.Log",
                typeof(Log),
                baseEntityType);

            var idLog = runtimeEntityType.AddProperty(
                "IdLog",
                typeof(int),
                propertyInfo: typeof(Log).GetProperty("IdLog", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Log).GetField("<IdLog>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            idLog.AddAnnotation("Relational:ColumnName", "id_log");
            idLog.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var action = runtimeEntityType.AddProperty(
                "Action",
                typeof(string),
                propertyInfo: typeof(Log).GetProperty("Action", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Log).GetField("<Action>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 100);
            action.AddAnnotation("Relational:ColumnName", "action");
            action.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var date = runtimeEntityType.AddProperty(
                "Date",
                typeof(DateTime?),
                propertyInfo: typeof(Log).GetProperty("Date", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Log).GetField("<Date>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            date.AddAnnotation("Relational:ColumnName", "date");
            date.AddAnnotation("Relational:ColumnType", "datetime");
            date.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            date.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var idUser = runtimeEntityType.AddProperty(
                "IdUser",
                typeof(int?),
                propertyInfo: typeof(Log).GetProperty("IdUser", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Log).GetField("<IdUser>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            idUser.AddAnnotation("Relational:ColumnName", "id_user");
            idUser.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { idLog });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK__Log__6CC851FEE62BD27D");

            var index = runtimeEntityType.AddIndex(
                new[] { idUser });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IdUser")! },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("IdUser")! })!,
                principalEntityType);

            var idUserNavigation = declaringEntityType.AddNavigation("IdUserNavigation",
                runtimeForeignKey,
                onDependent: true,
                typeof(User),
                propertyInfo: typeof(Log).GetProperty("IdUserNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Log).GetField("<IdUserNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var logs = principalEntityType.AddNavigation("Logs",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Log>),
                propertyInfo: typeof(User).GetProperty("Logs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(User).GetField("<Logs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "fk_log_user");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Log");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
